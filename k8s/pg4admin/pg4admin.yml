apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_SERVICE: bdf-postgres-postgresql
  POSTGRES_PORT: "5432"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pg4admin-config
data:
  config_server.py: |
    import sqlite3, os
    conn = sqlite3.connect("/var/lib/pgadmin/pgadmin4.db")
    c= conn.cursor()

    def insert_env_var(s):
      ss = s
      for k, v in os.environ.items():
        ss = ss.replace("<"+k+">",v)
      return ss

    st= "INSERT INTO server (id, user_id, servergroup_id, name, host, port, maintenance_db, username, ssl_mode, hostaddr, db_res, sslcert, sslkey, sslcompression, use_ssh_tunnel, tunnel_port, tunnel_authentication, connect_timeout) values (1, 1, 1, 'Data Ware House', '<POSTGRES_SERVICE>', '<POSTGRES_PORT>', '<POSTGRES_USER>', '<POSTGRES_PASSWORD>', 'prefer', '', '', '<STORAGE_DIR>/.postgresql/postgresql.crt', '<STORAGE_DIR>/.postgresql/postgresql.key', 0, 0, '22', 0, 0);"
    statement = insert_env_var(st)
    try:
      c.execute(statement)
      conn.commit()
    except Exception as e:
      conn.rollback()
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: servers-config
data:
  servers.json: |
    {
        "Servers": {
            "1": {
                "Name": "Data Ware House",
                "Group": "Server Group 1",
                "Port": 5432,
                "Username": "postgres",
                "Host": "bdf-postgres-postgresql",
                "SSLMode": "prefer",
                "MaintenanceDB": "postgres"
             }
         }
    }
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: pg4admin
  labels:
    app: pg4admin
spec:
  selector:
    matchLabels:
      app: pg4admin
  template:
    metadata:
      name: pg4admin
      labels:
        app: pg4admin
    spec:
      containers:
      - name: pg4admin
        image: dpage/pgadmin4
        env:
          - name: PGADMIN_DEFAULT_EMAIL
            value: admin@fadi.com
          - name: PGADMIN_DEFAULT_PASSWORD
            value: password
         # - name: PGADMIN_ENABLE_TLS
         #   value: "True"
        envFrom:
          - configMapRef:
              name: postgres-config
          - configMapRef:
              name: servers-config
        volumeMounts:
          - name: config-vol
            mountPath: /pgadmin-script
          - name: servers-config
            mountPath: /pgadmin4/servers.json
            subPath: servers.json
      volumes:
        - name: config-vol
          configMap:
            name: pg4admin-config
            items:
              - key: config_server.py
                path: config_server.py
        - name: servers-config
          configMap:
            name: servers-config
      initContainers:
      - name: init-pg4admin
        image: busybox
        command: ['sh', '-c', 'until nslookup bdf-postgres-postgresql; do echo waiting for myservice; sleep 2; done;']
---
kind: Service
apiVersion: v1
metadata:
  name: pg4admin
spec:
  selector:
    app: pg4admin
  ports:
    - port: 80
  type: LoadBalancer
